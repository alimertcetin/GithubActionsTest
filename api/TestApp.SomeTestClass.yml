### YamlMime:ManagedReference
items:
- uid: TestApp.SomeTestClass
  commentId: T:TestApp.SomeTestClass
  id: SomeTestClass
  parent: TestApp
  children:
  - TestApp.SomeTestClass.Create
  - TestApp.SomeTestClass.MethodWithParams(System.Int32[])
  - TestApp.SomeTestClass.SomeTestMethod
  - TestApp.SomeTestClass.TEST_STRİNG
  langs:
  - csharp
  - vb
  name: SomeTestClass
  nameWithType: SomeTestClass
  fullName: TestApp.SomeTestClass
  type: Class
  source:
    remote:
      path: TestApp/SomeTestClass.cs
      branch: main
      repo: https://github.com/alimertcetin/GithubActionsTest
    id: SomeTestClass
    path: TestApp/SomeTestClass.cs
    startLine: 2
  assemblies:
  - TestApp
  namespace: TestApp
  syntax:
    content: 'public class SomeTestClass : object'
    content.vb: >-
      Public Class SomeTestClass
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - TestApp.AnImportantClass
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TestApp.SomeTestClass.TEST_STRİNG
  commentId: F:TestApp.SomeTestClass.TEST_STRİNG
  id: TEST_STRİNG
  parent: TestApp.SomeTestClass
  langs:
  - csharp
  - vb
  name: TEST_STRİNG
  nameWithType: SomeTestClass.TEST_STRİNG
  fullName: TestApp.SomeTestClass.TEST_STRİNG
  type: Field
  source:
    remote:
      path: TestApp/SomeTestClass.cs
      branch: main
      repo: https://github.com/alimertcetin/GithubActionsTest
    id: TEST_STRİNG
    path: TestApp/SomeTestClass.cs
    startLine: 4
  assemblies:
  - TestApp
  namespace: TestApp
  syntax:
    content: public const string TEST_STRİNG = null
    return:
      type: System.String
    content.vb: Public Const TEST_STRİNG As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TestApp.SomeTestClass.Create
  commentId: M:TestApp.SomeTestClass.Create
  id: Create
  parent: TestApp.SomeTestClass
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: SomeTestClass.Create()
  fullName: TestApp.SomeTestClass.Create()
  type: Method
  source:
    remote:
      path: TestApp/SomeTestClass.cs
      branch: main
      repo: https://github.com/alimertcetin/GithubActionsTest
    id: Create
    path: TestApp/SomeTestClass.cs
    startLine: 10
  assemblies:
  - TestApp
  namespace: TestApp
  summary: "\nFactory method to create <xref href=\"TestApp.SomeTestClass\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static SomeTestClass Create()
    return:
      type: TestApp.SomeTestClass
      description: An usable <xref href="TestApp.SomeTestClass" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Create As SomeTestClass
  overload: TestApp.SomeTestClass.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TestApp.SomeTestClass.SomeTestMethod
  commentId: M:TestApp.SomeTestClass.SomeTestMethod
  id: SomeTestMethod
  parent: TestApp.SomeTestClass
  langs:
  - csharp
  - vb
  name: SomeTestMethod()
  nameWithType: SomeTestClass.SomeTestMethod()
  fullName: TestApp.SomeTestClass.SomeTestMethod()
  type: Method
  source:
    remote:
      path: TestApp/SomeTestClass.cs
      branch: main
      repo: https://github.com/alimertcetin/GithubActionsTest
    id: SomeTestMethod
    path: TestApp/SomeTestClass.cs
    startLine: 18
  assemblies:
  - TestApp
  namespace: TestApp
  summary: "\nMethod that does some important things\n"
  example: []
  syntax:
    content: public static void SomeTestMethod()
    content.vb: Public Shared Sub SomeTestMethod
  overload: TestApp.SomeTestClass.SomeTestMethod*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TestApp.SomeTestClass.MethodWithParams(System.Int32[])
  commentId: M:TestApp.SomeTestClass.MethodWithParams(System.Int32[])
  id: MethodWithParams(System.Int32[])
  parent: TestApp.SomeTestClass
  langs:
  - csharp
  - vb
  name: MethodWithParams(Int32[])
  nameWithType: SomeTestClass.MethodWithParams(Int32[])
  fullName: TestApp.SomeTestClass.MethodWithParams(System.Int32[])
  type: Method
  source:
    remote:
      path: TestApp/SomeTestClass.cs
      branch: main
      repo: https://github.com/alimertcetin/GithubActionsTest
    id: MethodWithParams
    path: TestApp/SomeTestClass.cs
    startLine: 28
  assemblies:
  - TestApp
  namespace: TestApp
  summary: "\nCalculate sum\n"
  example: []
  syntax:
    content: public int MethodWithParams(params int[] arr)
    parameters:
    - id: arr
      type: System.Int32[]
      description: Array that contains values
    return:
      type: System.Int32
      description: The sum
    content.vb: Public Function MethodWithParams(ParamArray arr As Integer()) As Integer
  overload: TestApp.SomeTestClass.MethodWithParams*
  nameWithType.vb: SomeTestClass.MethodWithParams(Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TestApp.SomeTestClass.MethodWithParams(System.Int32())
  name.vb: MethodWithParams(Int32())
references:
- uid: TestApp
  commentId: N:TestApp
  name: TestApp
  nameWithType: TestApp
  fullName: TestApp
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TestApp.SomeTestClass
  commentId: T:TestApp.SomeTestClass
  parent: TestApp
  name: SomeTestClass
  nameWithType: SomeTestClass
  fullName: TestApp.SomeTestClass
- uid: TestApp.SomeTestClass.Create*
  commentId: Overload:TestApp.SomeTestClass.Create
  name: Create
  nameWithType: SomeTestClass.Create
  fullName: TestApp.SomeTestClass.Create
- uid: TestApp.SomeTestClass.SomeTestMethod*
  commentId: Overload:TestApp.SomeTestClass.SomeTestMethod
  name: SomeTestMethod
  nameWithType: SomeTestClass.SomeTestMethod
  fullName: TestApp.SomeTestClass.SomeTestMethod
- uid: TestApp.SomeTestClass.MethodWithParams*
  commentId: Overload:TestApp.SomeTestClass.MethodWithParams
  name: MethodWithParams
  nameWithType: SomeTestClass.MethodWithParams
  fullName: TestApp.SomeTestClass.MethodWithParams
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
